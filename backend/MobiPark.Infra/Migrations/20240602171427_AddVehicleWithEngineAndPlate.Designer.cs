// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobiPark.Infra;

#nullable disable

namespace MobiPark.Infra.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240602171427_AddVehicleWithEngineAndPlate")]
    partial class AddVehicleWithEngineAndPlate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("MobiPark.Domain.Models.ParkingSpace", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Number");

                    b.ToTable("ParkingSpaces");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.EngineEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasDiscriminator<string>("EngineType").HasValue("EngineEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.LicensePlateEntity", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("TEXT")
                        .HasColumnName("LicensePlate");

                    b.Property<string>("LicensePlateType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.HasKey("Value");

                    b.ToTable("LicensePlates");

                    b.HasDiscriminator<string>("LicensePlateType").HasValue("LicensePlateEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("VehicleEntity", b =>
                {
                    b.Property<string>("LicensePlateValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("EngineId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.HasKey("LicensePlateValue");

                    b.HasIndex("EngineId");

                    b.ToTable("Vehicles");

                    b.HasDiscriminator<string>("VehicleType").HasValue("VehicleEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.ElectricalEngineEntity", b =>
                {
                    b.HasBaseType("MobiPark.Infra.Entities.EngineEntity");

                    b.Property<int>("BatteryCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentBatteryCapacity")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Electrical");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.ThermalEngineEntity", b =>
                {
                    b.HasBaseType("MobiPark.Infra.Entities.EngineEntity");

                    b.HasDiscriminator().HasValue("Thermal");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.DeLicensePlateEntity", b =>
                {
                    b.HasBaseType("MobiPark.Infra.Entities.LicensePlateEntity");

                    b.HasDiscriminator().HasValue("DeLicensePlate");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.FrLicensePlateEntity", b =>
                {
                    b.HasBaseType("MobiPark.Infra.Entities.LicensePlateEntity");

                    b.HasDiscriminator().HasValue("FrLicensePlate");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.CarEntity", b =>
                {
                    b.HasBaseType("VehicleEntity");

                    b.HasDiscriminator().HasValue("Car");
                });

            modelBuilder.Entity("MobiPark.Infra.Entities.MotorcycleEntity", b =>
                {
                    b.HasBaseType("VehicleEntity");

                    b.HasDiscriminator().HasValue("Motorcycle");
                });

            modelBuilder.Entity("VehicleEntity", b =>
                {
                    b.HasOne("MobiPark.Infra.Entities.EngineEntity", "Engine")
                        .WithMany()
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobiPark.Infra.Entities.LicensePlateEntity", "LicensePlate")
                        .WithMany()
                        .HasForeignKey("LicensePlateValue")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Engine");

                    b.Navigation("LicensePlate");
                });
#pragma warning restore 612, 618
        }
    }
}
